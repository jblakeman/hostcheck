#!/bin/bash

IPT=$(which iptables)
TRACERT=$(which traceroute)
CONN=$(which conntrack)
IP=$(which ip)
CAP=$(which tcpdump)
GEO=$(which geoiplookup)

tmp=/tmp/host
null=/dev/null
host_cap=$tmp/host.pcap
client_cap=$tmp/client.pcap

# Ascii color codes
col="\x1b["
end="\x1b[0m"
green="1;32"
underline="4m"
bold="1m"

d="[0-9]"
yorn="Please answer yes or no"

track ()
{
    # Count packets of players
    local i
    packets=()
    while read -r line; do
        # Don't count packets with Xbox Live IP ranges
        if [[ $line == *"sport=$xport"* &&
                ! $line == *"src=65.59."* &&
                ! $line == *"src=65.55."* ]]; then
            [[ $line =~ packets=($d+) ]] && player_packets+=(${BASH_REMATCH[1]})
        fi
    done < <(sudo $CONN -L -p udp 2>$null)
    if [[ $1 == pack ]]; then
        max_packets=${player_packets[0]}
        for i in ${player_packets[@]/$max_packets/}; do
            if [ $i -gt $max_packets ]; then
                max_packets=$i
            fi
        done
    fi
}
procKill ()
{
    local i
    for i; do
        if [ -e /proc/$i ]; then
            disown $i
            sudo kill -9 $i
        fi
    done
}
controlC ()
{
    echo -e "\rScript interrupted"
    rm -rf $tmp
    procKill ${pids[@]}
    exit 1
}
finishedBG ()
{
    # Create temporary file to signal end of process

    local shared
    shared=$tmp/$1
    echo 1 > $shared
    wait $2
    rm $shared
}
wheel ()
{
    local i
    for i; do
        printf " $col${green}m%s$end\r" "$i"
        sleep ".15"
    done
}
unban ()
{
    local yn
    read -p "Unblock Host after disconnect? (Yy|Nn) " yn
        case $yn in
            [Yy]*)
                { sleep 20 && sudo $IP rule del from $xbox to $host blackhole; } &
                pids+=($!)
                ;;
            [Nn]*);;
            *)
                echo "$yorn"
                unban;;
        esac
}
disconnect ()
{
    local yn
    read -p "Disconnect from Host? (Yy|Nn) " yn
        case $yn in
            [Yy]*)
                sudo $IP rule add from $xbox to $host blackhole
                unban;;
            [Nn]*);;
            *)
                echo "$yorn"
                disconnect;;
        esac
}
haversine ()
{
    # Find distance between two points on the globe

    local pi rad d_lat d_long a b
    pi=$(echo "4*a(1)"|bc -l)
    radians=$(echo "$pi/180"|bc -l)
    lat1=$(echo "${lat[$1]}*$radians"|bc -l)
    long1=$(echo "${long[$1]}*$radians"|bc -l)
    lat2=$(echo "${lat[$2]}*$radians"|bc -l)
    long2=$(echo "${long[$2]}*$radians"|bc -l)
    rad=$(echo "6371.0072*0.6214"|bc -l)
    d_lat=$(echo "$lat1 - $lat2"|bc -l)
    d_long=$(echo "$long1 - $long2"|bc -l)
    a=$(echo "sqrt(s($d_lat/2)^2+c($lat1)*c($lat2)*s($d_long/2)^2)"|bc -l)
    b=$(awk -v a=$a 'BEGIN{print 2*atan2(a,sqrt(1-a*a));}')
    dist=$(printf "%1.0f" $(echo "$rad*$b"|bc -l))
}
info ()
{
    echo -e "\t$col${underline}Country$end:           ${country[$1]}"
    echo -e "\t$col${underline}Region$end:            ${city[$1]}, ${state[$1]}"
    echo -e "\t$col${underline}Provider$end:          ${isp[$1]}"
    echo -e "\t$col${underline}Average Ping$end:      ${avg_rtt[$1]} ms"
    echo -e "\t$col${underline}Ping Deviation$end:    ${jitter[$1]}$end ms"
    echo -e "\t$col${underline}Total Distance$end:    ${total_dist[$1]}$end miles"
}
infoCall ()
{
    # Output statistics for each player

    local n player
    n=1
    for player; do
        if [[ $player == $host ]]; then
            echo -e "\n$col${bold}Host$end"
            info $player
        elif [[ $player != $pub_ip ]]; then
            echo -e "\n$col${bold}Player $n$end\n"
            info $player
            echo -e "\t$col${underline}Host Distance$end:     ${host_dist[$player]} miles"
            echo -e "\t$col${underline}User Distance$end:     ${user_dist[$player]} miles"
            ((n++))
        else
            echo -e "\n$col${bold}User$end\n"
            echo -e "\t$col${underline}Ping Deviation$end:    $avg_jitter ms"
            echo -e "\t$col${underline}Host Distance$end:     ${host_dist[$player]} miles"
            echo -e "\t$col${underline}Total Distance$end:    ${total_dist[$player]} miles"
            echo -e "\t$col${underline}Average Speed$end:     $avg_mpm miles/ms"
        fi
    done
}
average ()
{
    local sum i
    sum=0
    for i; do
        sum=$(echo "$i+$sum"|bc -l)
    done
    echo "scale=3; $sum/$#"|bc
}
total (){
    local sum i
    sum=0
    for i; do
        ((sum+=$i))
    done
    echo $sum
}
traceOut ()
{
    # Output traceroute latency to furthest hop

    local trace i
    while read -ra line; do
        # Don't match dropped hops or unreachable messages
        if [[ ${line[@]} != *"*"* && ${line[@]} != *"!"* ]]; then
            trace=()
            for i in ${line[@]}; do
                # match time in milliseconds
                if [[ $i =~ $d+\.$d+ && ! $i =~ $d+\.$d+\. ]]; then
                    trace+=($i)
                fi
            done
        fi
    done < <(sudo $TRACERT $player -q 3 -n -f 5 -m 25)
    echo "${trace[@]}"
}
dumpRead ()
{
    # Parse tcpdump for player IP addresses

    local i d3 ip
    d3="$d{1,3}"
    ip="$d3\.$d3\.$d3\.$d3"
    while read -ra line; do
        for i in ${line[@]}; do
            if [[ $i =~ $ip ]]; then
                if [[ $BASH_REMATCH != $xbox ]]; then
                    echo $BASH_REMATCH
                    # Match first IP only if host capture
                    [[ $1 == $host_cap ]] && return
                fi
            fi
        done
    done < <(sudo $CAP -n -r $1 2>$null)
}
regions ()
{
    local player n re
    re="[-0-9\.]{8,11}" 
    for player; do
        # Parse geoiplookup for location data
        n=0
        while IFS=, read -ra reg; do
            ((n++))
            # Only need lat/long points for user
            if [[ $player != $pub_ip ]]; then
                if [ $n -eq 1 ]; then
                    country[$player]="${reg[-1]#[[:space:]]}"
                elif [ $n -eq 2 ]; then
                    city[$player]="${reg[-6]#[[:space:]]}"
                    state[$player]="${reg[-7]#[[:space:]]}"
                fi
            fi
            if [[ ${reg[@]} =~ ($re)\ ($re) ]]; then
                lat[$player]=${BASH_REMATCH[1]}
                long[$player]=${BASH_REMATCH[2]}
                break
            fi
        done < <($GEO $player)
    done
}
ispFind ()
{
    # ISP lookup fields vary by region
    while read ref org; do
        if [[ ${country[$1]} == "United States" ||
                ${country[$1]} == "Canada" ]]; then
            if [[ $ref == "CustName:" || $ref == "OrgName:" ]]; then
                isp[$1]="$org"
                break
            fi
        elif [[ $ref == "descr:" || $ref == "owner:" ]]; then
            isp[$1]="$org"
            break
        fi
    done < <(whois $1)
    [[ ! ${isp[$1]} ]] && isp[$1]=N/A
}
latency ()
{
    local trace
    read trace < $tmp/$1
    trace_ms[$1]="$trace"
    avg_rtt[$1]=$(printf "%1.3f" $(average ${trace_ms[$1]}))
    diff[$1]="$(
        for i in ${trace_ms[$1]}; do
            echo "($i - ${avg_rtt[$1]})^2"|bc
        done
    )"
    diff_avg[$1]=$(average ${diff[$1]})
    jitter[$1]=$(printf "%1.3f" $(echo "sqrt(${diff_avg[$1]})"|bc))
    mpm[$1]=$(printf "%1.0f" $(echo "(${user_dist[$1]}*2)/${avg_rtt[$1]}"|bc)) 
}
distances ()
{
    # Perform distance calculations for each unique pair

    local i j refs distances increment player target
    declare -A distances
    refs=(${!players[@]})
    user_ref=${refs[-1]}

    # Iterate over all player references except last (User)
    for i in ${refs[@]:0:$user_ref}; do
        player=${players[$i]}
        increment=$((i+1))

        # Calculate only from next reference to the end
        for j in ${refs[@]:$increment}; do
            target=${players[$j]}
            haversine $player $target
            distances[$i,$j]=$dist
            [ $i -eq 0 ] && host_dist[$target]=$dist
            [ $j -eq $user_ref ] && user_dist[$player]=$dist
        done
    done

    # Total uniquely for Host and User
    total_dist[$host]=$(total ${host_dist[@]})
    total_dist[$pub_ip]=$(total ${user_dist[@]})

    # Add up total distance for each other player
    for i in ${refs[@]:1:$user_ref}; do
        player=${players[$i]}
        total_dist[$player]=0
        for j in "${!distances[@]}"; do
            if [[ $j == *"$i"* ]]; then
                ((total_dist[$player]+=${distances[$j]}))
            fi
        done
    done
}
